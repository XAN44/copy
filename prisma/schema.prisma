generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String    @id @default(cuid())
    nickname        String?   @unique
    name            String?   @unique
    username        String?   @unique
    password        String?
    bio             String?
    AtCreate        DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    email           String?   @unique
    emailVerified   DateTime?
    image           String?
    coverimage      String?
    followingIds    String[]
    hasNotification Boolean?
    accounts        Account[]
    sessions        Session[]

    post          Post[]
    comments      Comment[]
    notifications Notification[]
}

model Post {
    id        String    @id @default(cuid())
    content   String?
    ImagePost String?
    author    User?     @relation(fields: [authorId], references: [id])
    authorId  String?
    createdAt DateTime  @default(now())
    comments  Comment[]
}

model Comment {
    id                String    @id @default(cuid())
    text              String
    createdAt         DateTime  @default(now())
    author            User?     @relation(fields: [authorid], references: [id])
    authorid          String?
    Post              Post?     @relation(fields: [postId], references: [id])
    postId            String?
    repliedComment    Comment?  @relation("RepliedComment", fields: [repliedCommentId], references: [id])
    repliedCommentId  String?
    commentedComments Comment[] @relation("RepliedComment")
}

model Notification {
    id       String   @id @default(cuid())
    body     String
    userId   String
    createAt DateTime
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
